# -*- mode: org; coding: utf-8-unix; fill-column: 120; -*-
#+OPTIONS: ^:{}

* R0.7.0                                                                                  :ARCHIVE:
*** DONE Start using signed tags from R0.7.0                                              :ARCHIVE:
*** DONE Add a check in the Tree::TreeNode.add method to prevent addition of nil child nodes :ARCHIVE:
    CLOSED: [2010-02-23 Tue 23:07]
*** DONE Fix the edge condition for Tree::TreeNode.isOnlyChild? when the root node is the receiver. :ARCHIVE:
    CLOSED: [2010-02-23 Tue 22:03]
    There really is no good default to this situation.  We will return 'true' simply because there is no other sibling
    to a root.  However, a good case can be made that a root node does not have any parent either.
*** DONE Add a convenience 'level' method to the TreeNode class (will be an alias to nodeDepth) :ARCHIVE:
    CLOSED: [2010-02-21 Sun 01:02]
*** DONE Add a API-CHANGES file to document the various API changes made till date        :ARCHIVE:
    CLOSED: [2010-01-31 Sun 00:52]
*** DONE Add new methods to return the degree counts of the receiver node (in-degree and out-degree) :ARCHIVE:
    CLOSED: [2010-01-30 Sat 23:56]




* R0.8.0                                                                                  :ARCHIVE:
*** DONE Convert all method names to the canonical /^[_a-z<>=\[|+-\/\*`]+[_a-z0-9_<>=~@\[\]]*[=!\?]?$/ pattern :ARCHIVE:
    See Roodi report at http://getcaliper.com/caliper/tool?tool=roodi&repo=git://github.com/evolve75/RubyTree.git
*** DONE Integrate the subtree cloning patch submitted by Vincenzo Farrugia.              :ARCHIVE:



* R0.8.1                                                                                  :ARCHIVE:
*** DONE Fix [[http://rubyforge.org/tracker/index.php?func%3Ddetail&aid%3D28613&group_id%3D1215&atid%3D4793][bug #28613]] which was affecting the `leftChild=' and `rightChild=' methods for binary trees. :ARCHIVE:



* R0.8.3

  This is a bugfix release.

*** TODO [#A] Resolve the infinite loop bug if a node is added to itself as a child       :Partial:
    Issue https://github.com/evolve75/RubyTree/issues/5

    This is a subtle problem to resolve.  The specific case of a node
    being added to itself is trivial to resolve, and the fix has been
    put in for 0.8.3.

    However, the general problem is that in the current code, a node
    can be added as a child to any portion of the tree down the
    hierarchy (e.g., as a grandchild), which will need a more thorough
    detection code in the ~TreeNode#add~ method, if it is to be done at
    runtime.

    The issue is really to prevent the tree becoming a graph.  Note
    that the issue is with duplicate nodes, /not/ duplicated content.

    A few options exist:
    1. Perform a runtime check in the ~TreeNode#add~ method.  This will
       cause a performance hit as the tree becomes larger.
    2. Allow the additions to go through, but create a new ~validate~
       method that checks for such cycles.
    3. Create separate configuration object which can be attached to
       the root of the tree, which allows per-tree configuration of
       the behavior - this does allow for the user to take control,
       but also introduces complications during tree mergers and
       spitting subtrees.
    4. Create a registry (to be maintained at the root?) of all nodes,
       and use this for validating the node additions (and preventing
       duplicates).  This needs to be a hash (to allow O(1) access),
       and will sacrifice memory.  There might be a need to
       restructure the internals to make better use of memory.


*** DONE Make Rubytree compatible with Bundler                                            :ARCHIVE:
    CLOSED: [2012-08-21 Tue 21:04]

*** DONE Make Rubytree compatible wth gem-testers                                         :ARCHIVE:
    CLOSED: [2012-08-21 Tue 21:04]

*** DONE Remove the dependency on Hoe                                                     :ARCHIVE:
    CLOSED: [2012-08-21 Tue 21:05]
*** DONE Resolve the _tree.rb_ file conflict with the [[http://netaddr.rubyforge.org/][netaddr gem]]                           :ARCHIVE:
    CLOSED: [2012-08-20 Mon 01:03]
    Issue https://github.com/evolve75/RubyTree/issues/8

*** DONE Update documentation to be more explicit about duplicate node names              :ARCHIVE:
    CLOSED: [2012-08-19 Sun 21:46]
    Issue https://github.com/evolve75/RubyTree/issues/7
    Update documentation for :name attribute in tree.rb.  There is no
    specific code fix needed.

*** DONE Allow integers to be used as node names (clarify the scenario). Fixed issue #6.  :ARCHIVE:
    CLOSED: [2012-08-19 Sun 15:17]
    Issue https://github.com/evolve75/RubyTree/issues/6
    We will need to warn the user when an Integer is used as a name
    for the node (but still allow the usage),
    and
    also add an optional flag to the TreeNode#[] method to allow the
    user to explicitly indicate use of the Integer parameter as a
    literal name, and not as an /index/ to the children array.

*** DONE Clarify (or fix) the scenario whether a root node without children is a leaf     :ARCHIVE:
    CLOSED: [2012-08-19 Sun 15:09]
    Issue http://rubyforge.org/tracker/index.php?func=detail&aid=29549&group_id=1215&atid=4793

#+begin_src ruby -n :eval no
  tree.each_leaf do |tree_leaf|
    tree_leaf_parent = tree_leaf.parent
    tree_leaf.remove_from_parent!
    puts tree_leaf_parent.is_leaf?
  end
#+end_src

    will return ~false~, while technically ~tree_leaf_parent~ becomes leaf itself when ~tree_leaf~ is removed.

    The problem here is that the code above is trying to concurrently modify the collection over which the ~each_leaf~
    iterator is looping, which has unpredicable results.  As an example, try this with an array:

#+begin_src ruby -n
    a = Array(1..5)
    a.each do |e|
      a.delete(e)
    end
    a
#+end_src

#+RESULTS:
| 2 | 4 |

    The result is surprising, as not all elements are being deleted.  A good explanation is available in [[https://groups.google.com/forum/?fromgroups#!topic/ruby-talk-google/iEDF8qhojss%255B1-25%255D][this thread]] on
    Ruby-Talk @ Google.

    The correct way to handle the original need is:

#+begin_src ruby -n :eval no
  leafs = @root.each_leaf
  parents = leafs.collect {|leaf| leaf.parent }
  leafs.each {|leaf| leaf.remove_from_parent!}
  parents.each {|parent| assert(parent.is_leaf?) if not parent.has_children?}
#+end_src

    Basically, the parent removal is done in a separate block, and *then* the check for the parents becoming leafs is done.

*** DONE Fix the ~first_sibling~ and ~last_sibling~ for the root                              :ARCHIVE:
    CLOSED: [2012-08-19 Sun 21:01]
    The current behavior is correct, and has been left as is.
*** DONE Fix the ~siblings~ method to return an empty array for root                        :ARCHIVE:
    CLOSED: [2012-08-19 Sun 21:03]
*** DONE Fix the TreeNode#root method to return nil for root's root.                      :ARCHIVE:
    CLOSED: [2012-08-19 Sun 21:13]

    Left the code as-is, since we need some way to un-ambiguously find the root, regardless of the node given.


* R0.9.0
*** TODO Fix the inconsistency of returning root as its first sibling, and returning a nil instead.  Ditto for last sibling.
*** TODO fix the inconsistency of returning nil for the root, and an empty array for nodes which have no siblings.
*** TODO We should perhaps return nil as root's root.
*** TODO The semantic of length is probably unclear.  Should return the node_depth instead (or remove the method)
    The current equivalence of length to size should also be removed.


* Unplanned / Not assigned to any release
*** TODO Create the basic UML diagrams and upload to the Site
    DEADLINE: <2010-01-04 Mon>

*** TODO Add a YAML export method to the TreeNode class.

*** TODO marshal_load method probably should be a class method.  It currently clobbers self.
*** DONE Fix bug # [[http://rubyforge.org/tracker/index.php%3Ffunc%3Ddetail&aid%3D22535&group_id%3D1215&atid%3D4793][22535]]: The method Tree::TreeNode#depth is a misnomer.  The current definition actually provides the height function. :ARCHIVE:
    DEADLINE: <2010-01-09 Sat> CLOSED: [2010-01-03 Sun 22:15]

*** DONE Get the version control moved from CVS to Subversion (request submitted to RubyForge) :ARCHIVE:
    CLOSED: [2010-01-02 Sat 17:58]

*** DONE Add logic in Rakefile to read the file list from Manifest.txt file.              :ARCHIVE:
  CLOSED: [2009-12-31 Thu 23:37]
